

export const id = "random"
const title = " Scala Random"

const date = "2020-08-31T17:00:58"

const scastieId = "jVPerO3XQwWD2dyHZeWgww"

const mainInfoBox = <>
  <p>
A random number generator will generate a number that cannot be predicted.
</p>

<p>Although, it is impossible to generate <i>true</i> random number on a computer.</p>
</>

const detailedInfoBox = <>
  <p>Please take a look at line 3 with the <code>import</code> statement. This tells the compiler that, to be able to compile this code, it will need to fetch this other component. In most Scala code you are going to see in your professional life, there will be <code>import</code> statements at the beginning of the files. But, do not worry, those are usually added automatically by the development environment (IDE) so you donâ€™t have to care for it quite yet.</p>

<p>
You recognize the <code>new</code> from the SKB about <code>class</code>. It tells us that <code>scala.util.Random</code> is a <code>class</code> that needs to be instantiated before able to use it.</p>
<p></p>

<p>Now we have a random generator, what can we do with it? You can generate a lot of different types, here we are only focusing on <code>Int</code> to simplify things but you can take a look at <a href="https://www.scala-lang.org/api/current/scala/util/Random.html" target="_blank">scala.util.Random documentation</a> to see what else is available.</p>

<p>Try running the code several times, do you see that the number generated are different each time?</p>

<p>However, the number generated by the generator started with a seed always generate the same series of number. This is because there are no true random in a computer. A random generator is a function that given a number generate a new number. The starting number is the <code>seed</code>. If you are playing procedurally generated games, such as Minecraft for instance, this is what the <code>seed</code> is for, it initializes the random generator. </p>

<p>One interesting part of this SKB is the <code>randomInt</code> method. Did you figure out what was the missing part ? If not, here is the solution:</p>

<pre>rand.nextInt(max - min) + min
</pre>

<p>
The first part ( <code>rand.nextInt(max - min)</code> ) will return an Integer between <code>0</code> and <code>max - min</code> but we want something between <code>min</code> and <code>max</code>. We need to add <code>min</code>. That way, we generate a number between <code>0 + min</code> and <code>max - min + min</code>, which resolve to <code>min</code> to <code>max</code>.
</p>

<p>
There is a little brain candy at the end of the code, did you notice it ? <code>for</code>. This is called a <i>for-comprehension</i>. We are going to go more into details about it in up-coming SKBs.
</p>

<p>
An other brain candy is the <code>range</code>. In Scala, you can describe a range of number in different ways:
</p><ul>
<li><code>0 to 2</code> will generate the numbers <code>0, 1, 2</code></li>
<li><code>0 until 2</code> which will generate the numbers <code>0, 1</code></li>
<li><code>0 until 10 by 3</code> which will generate the numbers <code>0, 3, 6, 9</code></li>
</ul>
<p></p>
</>

const description = "Scala Knowledge Bits - Scala Random - Periodic exercise to learn bits of knowledge about Scala. Scala Random here."

const canonical_url = "https://leobenkel.com/2020/08/skb-scala-random/"

const prevUrl = "thread-sleep"
const nextUrl = "flatmap"

export const pageData = {
  id,
  title,
  date,
  scastieId,
  mainInfoBox,
  detailedInfoBox,
  description,
  canonical_url,
  prevUrl,
  nextUrl
}
 